// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteUser = `-- name: DeleteUser :one
DELETE FROM users
WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteUser(ctx context.Context, id pgtype.UUID) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, deleteUser, id)
	err := row.Scan(&id)
	return id, err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, name, password, email, registered_at FROM users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Password,
			&i.Email,
			&i.RegisteredAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, name, password, email, registered_at FROM users
WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.Email,
		&i.RegisteredAt,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users(
    id,
    name,
    password,
    email
) VALUES (
    $1,
    $2,
    $3,
    $4
)
RETURNING id
`

type InsertUserParams struct {
	ID       pgtype.UUID
	Name     string
	Password string
	Email    string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, insertUser,
		arg.ID,
		arg.Name,
		arg.Password,
		arg.Email,
	)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const isUsedEmail = `-- name: IsUsedEmail :one
SELECT EXISTS (
    SELECT TRUE FROM users
    WHERE email = $1 LIMIT 1
)
`

func (q *Queries) IsUsedEmail(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRow(ctx, isUsedEmail, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const userExists = `-- name: UserExists :one
SELECT EXISTS (
    SELECT TRUE FROM users
    WHERE id = $1 LIMIT 1
)
`

func (q *Queries) UserExists(ctx context.Context, id pgtype.UUID) (bool, error) {
	row := q.db.QueryRow(ctx, userExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

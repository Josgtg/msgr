// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: messages.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteMessage = `-- name: DeleteMessage :one
DELETE FROM messages
WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteMessage(ctx context.Context, id pgtype.UUID) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, deleteMessage, id)
	err := row.Scan(&id)
	return id, err
}

const getAllMessages = `-- name: GetAllMessages :many
SELECT id, chat, sender, message, sent_at FROM messages
`

func (q *Queries) GetAllMessages(ctx context.Context) ([]Message, error) {
	rows, err := q.db.Query(ctx, getAllMessages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Chat,
			&i.Sender,
			&i.Message,
			&i.SentAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessage = `-- name: GetMessage :one
SELECT id, chat, sender, message, sent_at FROM messages
WHERE id = $1
`

func (q *Queries) GetMessage(ctx context.Context, id pgtype.UUID) (Message, error) {
	row := q.db.QueryRow(ctx, getMessage, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Chat,
		&i.Sender,
		&i.Message,
		&i.SentAt,
	)
	return i, err
}

const getMessagesByChat = `-- name: GetMessagesByChat :many
SELECT id, chat, sender, message, sent_at FROM messages
WHERE chat = $1
`

func (q *Queries) GetMessagesByChat(ctx context.Context, chat pgtype.UUID) ([]Message, error) {
	rows, err := q.db.Query(ctx, getMessagesByChat, chat)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Chat,
			&i.Sender,
			&i.Message,
			&i.SentAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertMessage = `-- name: InsertMessage :one
INSERT INTO messages(
    id,
    chat,
    sender,
    message
) VALUES (
    $1,
    $2,
    $3,
    $4
)
RETURNING id, chat, sender, message, sent_at
`

type InsertMessageParams struct {
	ID      pgtype.UUID `json:"id"`
	Chat    pgtype.UUID `json:"chat"`
	Sender  pgtype.UUID `json:"sender"`
	Message string      `json:"message"`
}

func (q *Queries) InsertMessage(ctx context.Context, arg InsertMessageParams) (Message, error) {
	row := q.db.QueryRow(ctx, insertMessage,
		arg.ID,
		arg.Chat,
		arg.Sender,
		arg.Message,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Chat,
		&i.Sender,
		&i.Message,
		&i.SentAt,
	)
	return i, err
}

const messageExists = `-- name: MessageExists :one
SELECT EXISTS (
    SELECT TRUE FROM messages
    WHERE id = $1 LIMIT 1
)
`

func (q *Queries) MessageExists(ctx context.Context, id pgtype.UUID) (bool, error) {
	row := q.db.QueryRow(ctx, messageExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
